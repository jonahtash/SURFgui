prog_id@prog_label@prog_desc@prog_params@wrapper_id@wrapper_conf
download_pdf@"Download PDFs from PubMed"@"Downloads PDFs from PubMed using a .csv containing ids"@"[{'id':'in_csv', 'label':'PubMed .csv In', 'desc':'.csv file generated by PubMed', 'type':'file', 'direction':'in'},{'id':'out_pdf', 'label':'.pdf Folder Out', 'desc':'Folder for .pdf output files', 'type':'folder', 'direction':'out'},{'id':'pmed_result', 'label':'pmed_result','type':'file', 'direction':'flag'},{'id':'pmc_ids', 'label':'pmc_ids', 'type':'file','direction':'flag'},{'id':'pmed_ids', 'label':'pmed_ids', 'type':'file','direction':'flag'},{'id':'do_make_ids', 'label':'do_make_ids','type':'string', 'direction':'flag'},{'id':'do_pmc_dl', 'label':'do_pmc_dl', 'type':'string','direction':'flag'},{'id':'do_pmed_dl', 'label':'do_pmed_dl', 'type':'string','direction':'flag'}]"@conda@"{'target':'download.py', 'function':'run_download_program', 'parameters': {'in_csv':'in_csv', 'out_pdf':'out_pdf', 'pmed_result':'pmed_result', 'pmc_ids':'pmc_ids', 'pmed_ids':'pmed_ids', 'do_make_ids':'do_make_ids', 'do_pmc_dl':'do_pmc_dl', 'do_pmed_dl':'do_pmed_dl'}}"
pdf_parse_csv@"Parse PDF: CSV Output"@"Extracts experimental section from a folder of PDF files, and outputs the results to a .csv table."@"[{'id' :'pdf_in', 'label': 'PDF Folder In', 'desc': 'Folder of PDF files to parse', 'type':'folder', 'direction': 'in'}, {'id' :'csv_out', 'label': 'CSV Output File', 'desc': 'Output CSV file', 'type':'file', 'direction': 'in'}]"@conda@"{'target':'pdf_parse.py', 'function':'run_csv_output', 'parameters': {'pdf_in':'pdf_in', 'csv_out':'csv_out'}}"
originals_mssql@"Make Table from CSV: MS SQL Sever"@"Generates Originals Table from .csv"@"[{'id' :'in_csv', 'label': '.csv Input', 'desc': '.csv file to populate table', 'type':'file', 'direction': 'in'}, {'id' :'out_table', 'label': 'Output Table Name', 'desc': 'term, original, document', 'type':'table', 'direction': 'out'}]"@conda@"{'target':'make_originals_mssql.py', 'function':'populate_originals', 'parameters': {'in_csv':'in_csv', 'out_table':'out_table'}}"
originals_oracle@"Make Table from CSV: Oracle"@"Generates Originals Table from .csv"@"[{'id' :'in_csv', 'label': '.csv Input', 'desc': '.csv file to populate table', 'type':'file', 'direction': 'in'}, {'id' :'out_table', 'label': 'Output Table Name', 'desc': 'term, original, document', 'type':'table', 'direction': 'out'}]"@conda@"{'target':'make_originals_oracle.py', 'function':'populate_originals', 'parameters': {'in_csv':'in_csv', 'out_table':'out_table'}}"
indices_mssql@"Create Index on Table: MS SQL Server"@"Makes an index on a given table for given columns"@"[{'id' :'table', 'label': 'Table Name', 'desc': 'Table to index', 'type':'string', 'direction': 'in'}, {'id' :'index_name', 'label': 'Index Name', 'desc': '(Variable-like) name to assign to index' , 'type':'string', 'direction': 'in'},{'id' :'columns', 'label': 'Comma-seperated Column Names to Index', 'desc': 'Name of columns that will be indexed' , 'type':'string', 'direction': 'in'}]"@conda@"{'target':'create_index_mssql.py', 'function':'make_index', 'parameters': {'table':'table', 'index_name':'index_name', 'columns':'columns'}}"
indices_oracle@"Create Index on Table: Oracle"@"Makes an index on a given table for given columns"@"[{'id' :'table', 'label': 'Table Name', 'desc': 'Table to index', 'type':'string', 'direction': 'in'}, {'id' :'index_name', 'label': 'Index Name', 'desc': '(Variable-like) name to assign to index' , 'type':'string', 'direction': 'in'},{'id' :'columns', 'label': 'Comma-seperated Column Names to Index', 'desc': 'Name of columns that will be indexed' , 'type':'string', 'direction': 'in'}]"@conda@"{'target':'create_index_oracle.py', 'function':'make_index', 'parameters': {'table':'table', 'index_name':'index_name', 'columns':'columns'}}"
normalize@Normalize Term Table: CSV@"Normalizes terms based on their frequency in a provided .csv, and outputs the resulting table to a new .csv."@"[{'id' :'in_csv', 'label': '.csv Input', 'desc': '.csv file with original term table', 'type':'file', 'direction': 'in'}, {'id' :'out_csv', 'label': '.csv Output', 'desc': '.csv file for normalization output', 'type':'file', 'direction': 'out'}]"@conda@"{'target':'terms.py', 'function':'normalization_program', 'parameters': {'in_csv':'in_csv', 'out_csv':'out_csv'}}"
normalize_mssql@Normalize Term Table: MS SQL Server@"Normalizes terms based on their frequency in a provided table, and outputs the resulting table."@"[{'id' :'in_table', 'label': 'Input Table to Normalize', 'desc': 'term, original, document, snippet', 'type':'table', 'direction': 'in'}, {'id' :'out_table', 'label': 'Output Table of Normalized Terms', 'desc': 'piece, alphabetical, normalized_piece, freq, norm_freq, break_level, type, original, full_normalized, snippet sentence, ID', 'type':'table', 'direction': 'out'}]"@conda@"{'target':'terms_mssql.py', 'function':'normalization_program', 'parameters': {'in_table':'in_table', 'out_table':'out_table'}}"
normalize_oracle@Normalize Term Table: Oracle@"Normalizes terms based on their frequency in a provided table, and outputs the resulting table."@"[{'id' :'in_table', 'label': 'Input Table to Normalize', 'desc': 'term, original, document, snippet', 'type':'table', 'direction': 'in'}, {'id' :'out_table', 'label': 'Output Table of Normalized Terms', 'desc': 'piece, alphabetical, normalized_piece, freq, norm_freq, break_level, type, original, full_normalized, snippet, sentence, ID', 'type':'table', 'direction': 'out'}]"@conda@"{'target':'terms_oracle.py', 'function':'normalization_program', 'parameters': {'in_table':'in_table', 'out_table':'out_table'}}"
infer@"Generate Types 0-3 Terms: CSV Output"@"Generates two tables, one for type 0 terms, and one types 1-3 search terms."@"[{'id' :'in_csv', 'label': '.csv Input', 'desc': '.csv file produced by normalization program', 'type':'file', 'direction': 'in'}, {'id' :'out_csv_type_0', 'label': 'Terms Type 0 .csv Output', 'desc': '.csv file for type 0 terms output', 'type':'file', 'direction': 'out'}, {'id' :'out_csv_type_1', 'label': 'Terms Types 1 and 2 .csv Output', 'desc': '.csv file for types 1 and 2 terms output', 'type':'file', 'direction': 'out'}]"@conda@"{'target':'new_terms_up_to_2.py', 'function':'new_terms_program', 'parameters': {'in_csv':'in_csv', 'out_csv_type_0':'out_csv_type_0', 'out_csv_type_1':'out_csv_type_1'}}"
infer_mssql@"Generate Types 0-3 Terms: MS SQL Server"@"Generates two tables, one for type 0 terms, and one types 1-3 search terms."@"[{'id' :'in_term_table', 'label': 'Input Table Name from Normalization Program', 'desc': 'piece, alphabetical, normalized_piece, freq, norm_freq, break_level, type, original, full_normalized, snippet, sentence, ID', 'type':'table', 'direction': 'in'}, {'id' :'frag_table', 'label': 'Output Fragments Table Name', 'desc': 'randr_fragment, original, ID', 'type':'table', 'direction': 'out'}, {'id' :'new_term_table', 'label': 'Output Terms Types 0-3 Table', 'desc': 'randr_fragment, randr_fragment_broken, term_randr_found, snippet_randr_found, sentence_randr_found, type, ID', 'type':'table', 'direction': 'out'}]"@conda@"{'target':'infer_mssql.py', 'function':'new_terms_program', 'parameters': {'in_term_table':'in_term_table', 'frag_table':'frag_table', 'new_term_table':'new_term_table'}}"
infer_oracle@"Generate Types 0-3 Terms: Oracle"@"Generates two tables, one for type 0 terms, and one types 1-3 search terms."@"[{'id' :'in_term_table', 'label': 'Input Table Name from Normalization Program', 'desc': 'piece, alphabetical, normalized_piece, freq, norm_freq, break_level, type, original, full_normalized, snippet, sentence, ID', 'type':'table', 'direction': 'in'}, {'id' :'frag_table', 'label': 'Output Fragments Table Name', 'desc': 'randr_fragment, original, ID', 'type':'table', 'direction': 'out'}, {'id' :'new_term_table', 'label': 'Output Terms Types 0-3 Table', 'desc': 'randr_fragment, randr_fragment_broken, term_randr_found, snippet_randr_found, sentence_randr_found type, ID', 'type':'table', 'direction': 'out'}]"@conda@"{'target':'infer_oracle.py', 'function':'new_terms_program', 'parameters': {'in_term_table':'in_term_table', 'frag_table':'frag_table', 'new_term_table':'new_term_table'}}"